name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run flake8
      run: uv run flake8 app tests
      
    - name: Run mypy
      run: uv run mypy app
      
    - name: Run black check
      run: uv run black --check app tests
      
    - name: Run isort check
      run: uv run isort --check-only app tests

  test:
    name: Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run migrations
      run: uv run alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        
    - name: Run tests
      run: uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        RABBITMQ_URL: amqp://rabbitmq:rabbitmq@localhost:5672/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t image-processing-service:latest .
      
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 image-processing-service:latest
        sleep 10
        curl -f http://localhost:8000/api/v1/health || exit 1
        docker stop test-container

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Run safety check
      run: uv run safety check
      
    - name: Run bandit security linter
      run: uv run bandit -r app/ -f json -o bandit-report.json || true
      
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
